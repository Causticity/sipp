// Copyright Raul Vera 2020

// Basic test infrastructure for testing the sipp package.

package sipptestcore

import (
    "fmt"
	"image"
	"math"
	"os"
	"path/filepath"
)

var TestDir = filepath.Join(os.Getenv("GOPATH"), "src", "github.com", 
							"Causticity", "sipp", "testdata")

var smallPic = []uint8 {
    1,  2,  3,  4,
    5,  6,  7,  8,
    9, 10, 11, 12,
    13, 14, 15, 16,
}
 
var smallPic16 = []uint8 {
    0, 1, 0, 2, 0, 3, 0, 4,
    0, 5, 0, 6, 0, 7, 0, 8,
    0, 9, 0, 10, 0, 11, 0, 12,
    0, 13, 0, 14, 0, 15, 0, 16,
}
 
var smallZeroPic = []uint8 {
    0,  0,  0,  0,
    0,  0,  0,  0,
    0,  0,  0,  0,
    0,  0,  0,  0,
}

var ShiftedPic = []complex128 {
    1,  -2,  3,  -4,
    -5,  6,  -7,  8,
    9, -10, 11, -12,
    -13, 14, -15, 16,
}

var ScaledShiftedPic = []uint8 {
    131, 106, 148, 90,
    82, 172, 65, 189, 
    197, 41, 213, 24,
    16, 238, 0, 255,
}

var SmallPicGrad = []complex128 {
    5 - 3i, 5 - 3i, 5 - 3i,
    5 - 3i, 5 - 3i, 5 - 3i,
    5 - 3i, 5 - 3i, 5 - 3i,
}

var SmallPicGradMaxMod = math.Sqrt(34.0) 

var cosxCosyTiny = []uint8 {
 24,   2,   1, 164,   1,  91, 254,   1, 252, 244, 233, 225, 219, 216, 219, 224, 233, 243,   0,  13,
 23,  32,  37,  39,  37,  32,  23,  12,   4, 244, 245, 247, 250, 253,   2,   6,   9,  11,   0,   0,
 11,   9,   5,   2, 254, 250, 247, 245,   0,   4, 233, 247, 240, 245, 253,   4,  10,  16,   0,  12,
  0,   9,  16,  11,   3, 252, 246, 239,   0, 244,   4, 224, 250, 246, 241, 250,   4,  14,   0,  13,
250,   0,   6,  10,  14,   5, 251, 241,   0, 244,   6,   4, 219, 254, 252, 251, 250,   6,  17,  13,
252, 254,   0,   2,   4,   4,   6, 250, 239, 244,   4,   2,   4, 217,   2,   3,   5,   6,   6,  12,
  6,   3,   3,   0, 253, 253, 250, 250, 250, 244, 251, 253, 254,   4, 219,   5,  10,  15,  17,  12,
 17,  15,  11,   6,   0, 250, 245, 242, 238, 244, 239, 242, 245, 251,   4, 224,   8,  17,   0,  12,
  5,  15,  23,  16,   9,   0, 248, 239,   0, 244, 252, 242, 233, 240, 247,   4, 233,  11,   0,  12,
253,   4,  10,  16,  21,  11,   0, 245,   0, 244,   3, 252, 245, 240, 235, 245,   4, 243,   0,  12,
251, 254,   2,   6,   9,  11,  12,   0,   0, 244,   6,   3, 254, 251, 247, 245, 243,   2,   0,   0,
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  13,
 11,   9,   5,   2, 254, 250, 247, 245,   0,   0, 245, 247, 250, 253,   2,   6,   9,  11,   0,   4,
 23,   9,  16,  11,   3, 252, 246, 239,   0, 244,   0, 247, 240, 245, 253,   4,  10,  16,   0,  12,
  4,  32,   6,  10,  14,   5, 251, 241,   0, 244,   6,   0, 250, 246, 241, 250,   4,  14,   0,  13,
250,   4,  37,   2,   4,   4,   6, 250, 239, 244,   4,   2,   0, 254, 252, 251, 250,   6,  17,  13,
252, 254,   4,  40, 253, 253, 250, 250, 250, 244, 251, 253, 254,   0,   2,   3,   5,   6,   6,  12,
  6,   3,   3,   4,  37, 250, 245, 242, 238, 244, 239, 242, 245, 251,   0,   5,  10,  15,  17,  12,
 17,  15,  11,   6,   4,  31, 248, 239,   0, 244, 252, 242, 233, 240, 247,   0,   8,  17,   0,  12,
  5,  15,  23,  16,   9,   4,  23, 245,   0, 244,   3, 252, 245, 240, 235, 245,   0,  11,   0,  12,
}

var CosxCosyTinyGrad = []complex128 {
 (8-21i), (35-31i), (38+127i), (-127-38i), (31+54i), (-68+222i), (-242-22i), (3+240i), (-8+240i), (1-11i), (14-20i), (25-28i), (34-34i), (-214-34i), (-213+222i), (-215+227i), (-222+234i), (-243-11i), (0+13i),
 (-14+21i), (-27+28i), (-35+34i), (215+35i), (213-222i), (215-227i), (222-235i), (-12-241i), (0+244i), (-11+241i), (2+14i), (-7+3i), (-5+13i), (0-243i), (2-247i), (4+5i), (7+1i), (-11-16i), (12+0i),
 (-2+9i), (7-4i), (6-14i), (1+243i), (-2+247i), (-4-5i), (-8-1i), (-245-239i), (244+4i), (0-11i), (-9+243i), (3+16i), (6-5i), (-4+7i), (-3-237i), (0-240i), (4+12i), (-16-14i), (13+12i),
 (0-241i), (-3+16i), (-6+5i), (3-7i), (2+238i), (-1+241i), (-5-12i), (-239-241i), (244+244i), (-238-240i), (0+218i), (-5+246i), (4+27i), (6-13i), (10-2i), (0-247i), (2-236i), (3-6i), (13-4i),
 (4-252i), (0-248i), (-4+10i), (-6+12i), (-10+1i), (1+247i), (-1+235i), (-2-250i), (244+5i), (-240-238i), (-4+0i), (0+217i), (-2+250i), (-252+35i), (-249+249i), (-246+247i), (-244+1i), (0+11i), (-5+7i),
 (-249+248i), (-251-3i), (0-1i), (251+4i), (249-249i), (246-247i), (244+0i), (0-11i), (5-6i), (7-240i), (249-249i), (252-249i), (0-37i), (2-2i), (3-216i), (7+0i), (10-4i), (11-9i), (6-5i),
 (9-14i), (8-12i), (3-11i), (0+247i), (-3+253i), (-8+0i), (-8+5i), (-12+8i), (-6+6i), (-5+7i), (-9+14i), (-8+12i), (-3-241i), (0-32i), (5+1i), (3-214i), (7+7i), (-15+0i), (-5+12i),
 (-2+10i), (8-4i), (5-17i), (3-16i), (0+241i), (-2+245i), (-6-6i), (-242-1i), (6+244i), (8-5i), (3-10i), (-9+3i), (-5+18i), (-4-236i), (0-23i), (9+4i), (3-216i), (-17-11i), (12+12i),
 (-1-238i), (-5+19i), (-7+6i), (5-7i), (2-21i), (0+237i), (-3+239i), (-239-245i), (244+244i), (-241+8i), (0+239i), (3-19i), (7-5i), (-5+7i), (-2-231i), (0-12i), (10+7i), (-11-243i), (12+12i),
 (1-247i), (-2-244i), (-4+14i), (-7+15i), (-10+2i), (1-11i), (0+233i), (-245+0i), (244+244i), (-238-241i), (0+246i), (2+242i), (6-14i), (7-16i), (10-2i), (-2-241i), (-2+0i), (-243-2i), (0+12i),
 (-251+254i), (-254+2i), (-2+6i), (-6+9i), (-9+11i), (-11+12i), (-12+0i), (0+0i), (0+244i), (-244+6i), (-6+3i), (-3+254i), (-254+251i), (-251+247i), (-247+245i), (-245+243i), (-243+2i), (2+0i), (13-4i),
 (9-11i), (5-9i), (2-5i), (254-2i), (250-254i), (247-250i), (245-247i), (0-245i), (0+0i), (245+0i), (247-245i), (250-247i), (253-250i), (2-253i), (6-2i), (9-6i), (11-9i), (0-7i), (0+13i),
 (-2-14i), (7-4i), (6-14i), (1+243i), (-2+247i), (-4-5i), (-8-1i), (-245-239i), (244+0i), (0+1i), (2+247i), (-7+3i), (-5+13i), (0-243i), (2-247i), (4+5i), (7+1i), (-11-16i), (12+4i),
 (9+5i), (-3-16i), (-6+5i), (3-7i), (2+238i), (-1+241i), (-5-12i), (-239-241i), (244+244i), (-238-244i), (0+241i), (3+240i), (6-5i), (-4+7i), (-3-237i), (0-240i), (4+12i), (-16-14i), (13+12i),
 (0-218i), (5+2i), (-4-27i), (-6+12i), (-10+1i), (1+247i), (-1+235i), (-2-250i), (244+5i), (-240-238i), (-4-4i), (0+248i), (4+246i), (6-13i), (10-2i), (0-247i), (2-236i), (3-6i), (13-4i),
 (4-248i), (0-217i), (3-2i), (251-36i), (249-249i), (246-247i), (244+0i), (0-11i), (5-6i), (7-240i), (249-249i), (252-253i), (0+0i), (-252+252i), (-249+249i), (-246+247i), (-244+1i), (0+11i), (-5+7i),
 (-249+248i), (-251+1i), (0+37i), (-3+249i), (-3+216i), (-8+0i), (-8+5i), (-12+8i), (-6+6i), (-5+7i), (-9+14i), (-8+12i), (-3-245i), (0-249i), (3+3i), (7+0i), (10-4i), (11-9i), (6-5i),
 (9-14i), (8-12i), (3-7i), (0+31i), (-6+246i), (-2+214i), (-6-6i), (-242-1i), (6+244i), (8-5i), (3-10i), (-9+3i), (-5+18i), (-4-240i), (0-242i), (3+10i), (7+7i), (-15+0i), (-5+12i),
 (-2+10i), (8-4i), (5-17i), (3-12i), (0+22i), (-8+244i), (-3+216i), (-239-245i), (244+244i), (-241+8i), (0+239i), (3-19i), (7-5i), (-5+7i), (-2-235i), (0-237i), (3+17i), (-17-11i), (12+12i),
}

var CosxCosyTinyGradMaxMod = 357.0952253951318

func ComplexArrayToString(cpx []complex128, stride int) string {
    res := "\n"
    rows := len(cpx)/stride
    for y := 0; y < rows; y++ {
        for x := 0; x < stride; x++ {
            res += fmt.Sprintf(" %v,", cpx[y*stride + x])
        }
        res += "\n"
    }
    return res
}

var Gray = image.Gray {
    smallPic, 
    4, 
    image.Rectangle{image.Point{0, 0}, image.Point{4, 4}},
}

var Gray16 = image.Gray16 {
    smallPic16, 
    8, 
    image.Rectangle{image.Point{0, 0}, image.Point{4, 4}},
}

var GrayZero = image.Gray {
    smallZeroPic, 
    4, 
    image.Rectangle{image.Point{0, 0}, image.Point{4, 4}},
}

var CosxCosyTiny = image.Gray {
    cosxCosyTiny,
    20,
    image.Rectangle{image.Point{0, 0}, image.Point{20,20}},
}