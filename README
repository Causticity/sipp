Simple Image Processing Pipeline

This software consists of a set of packages for building image-processing
pipelines, as well as a demo program, sipp, that provides all the functions in
a command-line program.

In order to build the demo program you will need to install go-fftw, by 
following the instructions on it's github page: https://github.com/runningwild/go-fftw.
On Mac this is easy, on Windows not so much.

Note that only the sipp/fftw package and the demo program are under the GPL 
(http://www.gnu.org/licenses/gpl.html). The rest of the sipp packages are under 
the MIT Open-Source license at https://opensource.org/licenses/MIT, reproduced
below. This means that if you import package sipp/sfft, your program is under
the GPL. If you don't, it isn't. 

To build the demo program in a default Go workspace (as described in 
http://golang.org/doc/code.html#Workspaces), run 

go install github.com/Causticity/sipp/sipp from anywhere in the workspace.

Windows version:
go install github.com\Causticity\sipp\sipp

This will build the sipp demo program into the bin directory of the workspace.

Then to run it

sipp -in=<path to input image> -out=<prefix for output images> -a=true

For example, I have an out directory parallel to the standard src, pkg, and bin,
so I run from the root as follows:

sipp -in=src/github.com/Causticity/sipp/testdata/Lacryma_1024.png -out=out/Lac -a=true

This prepends the various output files with "Lac" and places them in the out
directory.

Each type of output file has it's own command-line argument, and there is an
argument to write all of them.

Full usage of sipp:
  -K int
    	Number of bins to scale the max radius to. The histogram will be 2K+1 bins on a side.
        This is used only for 16-bit images.
        If K is omitted, it is computed from the maximum excursion of the gradient.
        8-bit images always use a 511x511 histogram, as that covers the entire possible space.
  -a	Boolean; if true, write all the images
  -e	Boolean; if true, write a conventional entropy image
  -f	Boolean; if true, write the fft real and imaginary images
  -fls
    	Boolean; if true, write the fft log spectrum image
  -g	Boolean; if true, write the gradient real and imaginary images
  -ge
    	Boolean; if true, write a gradient-entropy image
  -h	Boolean; if true, write a histogram image
  -he
    	Boolean; if true, write a histogram-entropy image
  -hs
    	Boolean; if true, write a histogram image with the center spike suppressed
  -in string
    	Input image file; must be grayscale png
  -out string
    	Output image file prefix
  -t	Boolean; if true, write a thumbnail image

LICENSE

Copyright 2015 Raul Vera

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE.